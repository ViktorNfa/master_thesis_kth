<?xml version="1.0"?>
<launch>
  <!-- For SML testing -->
  <arg name="use_sim_time" default="false" />
  <!-- For simulation -->
  <!-- <arg name="use_sim_time" default="true" /> -->

  <arg name="gui" default="true" />
  <arg name="headless" default="false" />

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="0" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="use_sim_time" value="$(arg use_sim_time)" />
    <arg name="headless" value="$(arg headless)" />
    <arg name="paused" value="false"/>
  </include>

  <!-- Ideal formation position -->
  <rosparam param="formation_positions">[[0, 0], [0.75, 0.75], [0.75, -0.75]]</rosparam>

  <!-- Robots numbers -->
  <rosparam param="robots_number">[1, 2, 3]</rosparam>

  <!-- List of neighbours for each robot-->
  <rosparam param="neighbours">[[2, 3], [1, 3], [1, 2]]</rosparam>

  <!-- CBF Communication maintenance or obstacle avoidance activation (1 is activated/0 is deactivated) -->
  <param name="cbf_cm" value="1"/>
  <param name="cbf_oa" value="1"/>

  <!-- Safe distance for communication maintenance and obstacle avoidance -->
  <param name="safe_distance_cm" value="1.0"/>
  <param name="safe_distance_oa" value="0.5"/>

  <!-- Variable to determine if HuIL is active or not (1 is activated/0 is deactivated) as well as the robot it affects -->
  <param name="huil" value="1"/>
  <param name="human_robot" value="3"/>

  <!-- Nexus 0  -->
  <group ns="nexus0">
    <!-- Load robot description -->
    <include file="$(find sml_nexus_description)/launch/sml_nexus_description.launch" />
    <!-- Spawn the robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
      args="-urdf -model nexus0 -param robot_description -x -2 -y 0.5 -z 0.5" />
  </group>
    
  <!-- Nexus 1  -->
  <group ns="nexus1">
    <!-- Load robot description -->
    <include file="$(find sml_nexus_description)/launch/sml_nexus_description.launch" />
    <!-- Spawn the robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
      args="-urdf -model nexus1 -param robot_description -x -0.5 -y 1.7 -z 0.5" />
  </group>

  <!-- Nexus 2  -->
  <group ns="nexus2">
    <!-- Load robot description -->
    <include file="$(find sml_nexus_description)/launch/sml_nexus_description.launch" />
    <!-- Spawn the robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
      args="-urdf -model nexus2 -param robot_description -x 0 -y -1 -z 0.5" />
  </group>

  <!-- Centralized auto node -->
  <group ns="Auto">
    <node name="k_cbf_huil" pkg="first_task_formation_cbf" type="k_cbf_huil.py" output="screen" >
    </node>
  </group>

  <!-- Human-In-The-Loop controller node -->
  <group ns="HuIL">
    <node name="key_teleop" pkg="first_task_formation_cbf" type="key_teleop.py" output="screen" launch-prefix="gnome-terminal --command" >
      <param name="forward_rate" value="0.5"/>
      <param name="backward_rate" value="0.5"/>
      <param name="rotation_rate" value="0.5"/>
      <param name="hz" value="50"/>
    </node>
  </group>

  <!-- Logger node -->
  <group ns="Logger">
    <node name="logger" pkg="first_task_formation_cbf" type="logger.py" output="screen" >
      <param name="show_motion" value="1"/>
      <param name="cbf_cm_filename" value="/home/viktornfa/catkin_ws/src/master_thesis_victor/auxiliary_code/cbf_cm_log.csv"/>
      <param name="cbf_oa_filename" value="/home/viktornfa/catkin_ws/src/master_thesis_victor/auxiliary_code/cbf_oa_log.csv"/>
      <param name="controller_filename" value="/home/viktornfa/catkin_ws/src/master_thesis_victor/auxiliary_code/controller_log.csv"/>
      <param name="nom_controller_filename" value="/home/viktornfa/catkin_ws/src/master_thesis_victor/auxiliary_code/nom_controller_log.csv"/>
      <param name="huil_controller_filename" value="/home/viktornfa/catkin_ws/src/master_thesis_victor/auxiliary_code/huil_controller_log.csv"/>
    </node>
  </group>

  <!-- Motion capture system SML -->
  <include file="$(find mocap_qualisys)/launch/qualisys.launch" />
  <!-- Motion capture system simulation -->
  <!-- <include file="$(find mocap_simulator)/launch/qualisys_simulator.launch" /> -->

</launch>
